{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard extends KeycloakAuthGuard {\n    constructor(router, keycloak) {\n      super(router, keycloak);\n      this.router = router;\n      this.keycloak = keycloak;\n    }\n\n    isAccessAllowed(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Force the user to log in if currently unauthenticated.\n        if (!this.authenticated) {\n          yield this.keycloak.login({\n            redirectUri: window.location.origin + state.url\n          });\n        } // Get the roles required from the route.\n\n\n        const requiredRoles = route.data.roles; // Allow the user to to proceed if no additional roles are required to access the route.\n\n        if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n          return true;\n        } // Allow the user to proceed if all the required roles are present.\n\n\n        return requiredRoles.every(role => this.roles.includes(role));\n      });\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}